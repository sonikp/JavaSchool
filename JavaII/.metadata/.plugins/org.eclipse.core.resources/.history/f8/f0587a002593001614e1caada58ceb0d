import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List; // resolves problem with java.awt.List and java.util.List

/*
 * Assignment 4, Michael Floerchinger
 * 
 * This is a fresh copy of Picture.java created specifically for Assignment4.
 * 
 * 
 */

/**
 * A class that represents a picture.  This class inherits from 
 * SimplePicture and allows the student to add functionality to
 * the Picture class.  
 * 
 * Copyright Georgia Institute of Technology 2004-2005
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture 
{
  ///////////////////// constructors //////////////////////////////////
  
  /**
   * Constructor that takes no arguments 
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor 
     */
    super();  
  }
  
  /**
   * Constructor that takes a file name and creates the picture 
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }
  
  /**
   * Constructor that takes the width and height
   * @param width the width of the desired picture
   * @param height the height of the desired picture
   */
  public Picture(int width, int height)
  {
    // let the parent class handle this width and height
    super(width,height);
  }
  
  /**
   * Constructor that takes a picture and creates a 
   * copy of that picture
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }
  
  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
  }
  
  ////////////////////// methods ///////////////////////////////////////
  
  /*
   * program 45: Chromakey: replace all blue with the new background
   */
  
  public void chromakey(Picture newBg)
  {
	  Pixel currPixel = null;
	  Pixel newPixel = null;
	  int x = 0;
	  int y = 0;
	  
	  // loop through columns
	  for (;x < this.getWidth() - 1; x++ );
	  {
		  System.out.println("foo" + x);
		  // loop through rows
		  for (; y < this.getHeight() - 1; y++ );
		  {
			  System.out.println("foo" + y);
			// get current pixel
			  currPixel = this.getPixel(x,y);
			  
			  /*
			   * If the color at the current pixel is mostly blue (blue value is greater than red & green
			   * value combined), then use new background color
			   */
			  if ( currPixel.getRed() + currPixel.getGreen() < currPixel.getBlue())
			  {
				  newPixel = newBg.getPixel(x, y);
				  currPixel.setColor(newPixel.getColor());
			  }
		  }
	  }
  }
  
  
  
  
  
  /**
   * Method to return a string with information about this picture.
   * @return a string with information about the picture such as fileName,
   * height and width.
   */
  public String toString()
  {
    String output = "Picture, filename " + getFileName() + 
      " height " + getHeight() 
      + " width " + getWidth();
    return output;
    
  }
 
  public static void main(String[] args) 
  {
	  /*
	  String fileName = FileChooser.getMediaPath("blue-mark.jpg");
	  Picture mark = new Picture(fileName);
	  System.out.println(mark);
	  int x = 1;
	  System.out.println(x);
	  for ( x = 0; x < mark.getWidth(); x++)
	  {
		  System.out.println(x);
	  }
	  */
	  
	  
	  String fileName = FileChooser.getMediaPath("blue-mark.jpg");
	  Picture mark = new Picture(fileName);
	  fileName = FileChooser.getMediaPath("moon-surface.jpg");
	  Picture newBg = new Picture(fileName);
	  mark.chromakey(newBg);
	  mark.explore();
	  
	  
	  /*
	  Picture mark = new Picture(FileChooser.getMediaPath("blue-mark.jpg"));
	  Picture newBg = new Picture(FileChooser.getMediaPath("moon-surface.jpg"));
	  System.out.println(mark);
	  System.out.println(newBg);
	  
	  mark.chromakey(newBg);
	  mark.explore();
	  //mark.explore();
	  */
	  
	  /*
	  Picture mark = new Picture(FileChooser.getMediaPath("blue-mark.jpg"));
	  Picture moon = new Picture(FileChooser.getMediaPath("moon-surface.jpg"));
	  System.out.println(mark);
	  System.out.println(moon);
	  mark.show();
	  moon.show();
	  mark.chromakey(moon);
	  mark.show();
	 */
	  
	  

     
  }
  
} // this } is the end of class Picture, put all new methods before this
 