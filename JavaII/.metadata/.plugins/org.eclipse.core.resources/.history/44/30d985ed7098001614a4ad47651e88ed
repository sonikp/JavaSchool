
/**
 * Class that represents a sound.  This class is used by the students
 * to extend the capabilities of SimpleSound. 
 * 
 * Copyright Georgia Institute of Technology 2004
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Sound extends SimpleSound
{
  
  /////////////// consructors ////////////////////////////////////
  
  /**
   * Constructor that takes a file name
   * @param fileName the name of the file to read the sound from
   */
  public Sound(String fileName)
  {
    // let the parent class handle setting the file name
    super(fileName);
  }
  
  /**
   * Constructor that takes the number of samples in
   * the sound
   * @param numSamples the number of samples desired
   */
  public Sound (int numSamples)
  {
    // let the parent class handle this
    super(numSamples);
  }
  
  /**
   * Constructor that takes the number of samples that this
   * sound will have and the sample rate
   * @param numSamples the number of samples desired
   * @param sampleRate the number of samples per second
   */
  public Sound (int numSamples, int sampleRate)
  {
    // let the parent class handle this
    super(numSamples,sampleRate);
  }
  
  /**
   * Constructor that takes a sound to copy
   */
  public Sound (Sound copySound)
  {
    // let the parent class handle this
    super(copySound);
  }
  
  ////////////////// methods ////////////////////////////////////
  
  // Assignment Week 05 
  
  /*
   * Task 1 : Increase volume method
   * using a for-each loop
   */
  public void increaseVolume()
  {
	  SoundSample[] soundArray = this.getSamples();
	  
	  
	  for (SoundSample sample : soundArray)
	  {
		  // get sample value, multiply it by 2, then set 
		  // sample location with the new value
		  sample.setValue(sample.getValue() * 2);
	  }
  }
  
  public void increaseVolume(int multiplier)
  {
	  SoundSample[] soundArray = this.getSamples();
	  int value = 0;
	  int limit = 0;
	  
	  
	  for (SoundSample sample : soundArray)
	  {
		  // get sample rate
		  value = sample.getValue();
		  System.out.print("b4: " + value + "\t");
		  int valueNew = value * multiplier;
		  System.out.print("af: " + valueNew + "\t\n");
		 
		  /*
		  // implement a limiter to prevent extreme clipping
		  if ( valueNew * multiplier >= -32768 || valueNew * multiplier < 32767)
		  {
			  sample.setValue(value);
			  System.out.print("\t\tvalue: " + value + "\t\n");
		  }
		  else if ( valueNew * multiplier <= 32767 )
		  {
			  sample.setValue(32767);
			  System.out.print("\t\tlimited: " + value + "\t\n");
			  limit++;
		  }
		  else if (value * multiplier <= -32768)
		  {
			  sample.setValue(-32768);
			  System.out.print("\t\tlimited: " + value + "\t\n");
			  limit++;
		  }
		  */
	  }
	  System.out.println("\n\n" + limit);
  }
  
  /*
   * Task 2: halvePosDoubleNeg - halves the volume of positive 
   * values and doubles the volume of negative values
   */
  
  
  /**
   * Method to return the string representation of this sound
   * @return a string with information about this sound
   */
  public String toString()
  {
    String output = "Sound";
    String fileName = getFileName();
    
    // if there is a file name then add that to the output
    if (fileName != null)
      output = output + " file: " + fileName;
    
    // add the length in frames
    output = output + " number of samples: " + getLengthInFrames();
    
    return output;
  }
 
  public static void main(String[] args)
  {
    Sound sound1 = new Sound(FileChooser.getMediaPath("thisisatest.wav"));
    sound1.explore();
    sound1.increaseVolume(2);
    sound1.explore();
  }
             
} // this } is the end of class Sound, put all new methods before this